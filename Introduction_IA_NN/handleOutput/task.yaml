accessible: true
author: ''
categories: []
context: |-
    | Maintenant que toutes les couches sont configurés il ne nous reste plus qu'à déduire la prédiction du réseau.
    |
    | Pour rappel, notre réseau distingue une ligne verticale d'une ligne horizontale.
    | Les probabilités des 2 types de lignes sont les valeurs des neurones de la couche de sortie. Le premier neurone correspond à la probabilité de la ligne verticale alors que le second la probabilité de la ligne horizontale.
    |
    | Pour lire les valeurs des neurones des la couche de sortie, le nouveau bloc ``obtenir la valeur du neurone n°X de la couche de sortie`` entre en scène. Ce bloc te donnerra la valeur des neurones de la couche de sortie, cette valeur est une probabilité, c'est donc un réel compris entre 0 et 1.
    |
    | **Objectif**
    | Déduire correctement la conclusion/prédiction du réseau.
    | Pour cela tu peux dessiner le schéma de ton choix dans la grille, le traitement des couches du réseau sont géré automatiquement à chaque éxécution du code.
environment: default
evaluate: best
file: ''
groups: false
input_random: '0'
limits:
    output: '2'
    memory: '100'
    time: '30'
name: '[BLOCKLY] Tirer une conclusion'
network_grading: false
order: 15
problems:
    blocklyRes:
        options:
            zoom:
                maxScale: 3.0
                controls: true
                startScale: 1.0
                scaleSpeed: 1.2
                minScale: 0.3
                wheel: false
            grid:
                colour: '#ccc'
                snap: true
                length: 3
                spacing: 20
            toolboxPosition: start
            css: true
            oneBasedIndex: true
            speed: '60'
            scrollbars: true
            maxBlocks: Infinity
            visual:
                position: left
            media: /plugins/blockly/static/blockly/media/
        blocks_files:
        - ../$common/blocklyBlock/blocks.js
        - ../$common/blocklyBlock/blocksStubs.js
        header: ''
        type: blockly
        name: ''
        files:
        - ../$common/raphael.min.js
        - ../$common/simpleNetworkVisual.js
        - init.js
        workspace: |-
            <xml xmlns="http://www.w3.org/1999/xhtml" id="workspaceBlocks" style="display:none">
              <variables>
                <variable type="" id="O;lzyb1qu@q+Gz54Dv@_">resultat</variable>
              </variables>
              <block type="procedures_defreturn" id="l.+,Vh?5~V{:9hMevH$1" x="13" y="13">
                <field name="NAME">tirer une conclusion de la couche de sortie</field>
                <comment pinned="false" h="80" w="160">Describe this function...</comment>
                <statement name="STACK">
                  <block type="variables_set" id="w(fm0~j{1vmY!ADx$pzg">
                    <field name="VAR" id="O;lzyb1qu@q+Gz54Dv@_" variabletype="">resultat</field>
                    <value name="VALUE">
                      <shadow type="nn_res_ver" id="+1a4uH)|tzME9OMOG)AS"></shadow>
                    </value>
                    <next>
                      <block type="controls_if" id="1TSwf[`JDZKBj5]GH`Cn">
                        <value name="IF0">
                          <block type="logic_compare" id="ms45)M|fWRse:Ot0#}vw">
                            <field name="OP">GTE</field>
                            <value name="A">
                              <block type="get_neuron_last_layer" id="J0eoeX{-2s1~Bm~[|R~v">
                                <value name="neuron_i">
                                  <block type="math_number" id="UXF-VhWy[`eh{vBX9~,0">
                                    <field name="NUM">2</field>
                                  </block>
                                </value>
                              </block>
                            </value>
                            <value name="B">
                              <shadow type="math_number" id="6[M;Dh=N-:!;Y;IBrmsG">
                                <field name="NUM">0</field>
                              </shadow>
                            </value>
                          </block>
                        </value>
                        <statement name="DO0">
                          <block type="variables_set" id="Ae+aJ@4Zz{N~?rXxZZD|">
                            <field name="VAR" id="O;lzyb1qu@q+Gz54Dv@_" variabletype="">resultat</field>
                            <value name="VALUE">
                              <shadow type="nn_res_hor" id="WuB3g;:u`:|7S=2pD?-D"></shadow>
                            </value>
                          </block>
                        </statement>
                      </block>
                    </next>
                  </block>
                </statement>
                <value name="RETURN">
                  <block type="variables_get" id=".!qn+6[?}ws~u^~$H66C">
                    <field name="VAR" id="O;lzyb1qu@q+Gz54Dv@_" variabletype="">resultat</field>
                  </block>
                </value>
              </block>
              <block type="main" id="?e8d}nNm24_w]LTo~~R2" x="38" y="13">
                <next>
                  <block type="custom_print" id="YIwJNyQt9t@hTIp2nduQ" x="12" y="338">
                    <value name="value">
                      <block type="procedures_callreturn" id="(8@~U1I_waT9!l~R4.I%">
                        <mutation name="tirer une conclusion de la couche de sortie"></mutation>
                      </block>
                    </value>
                  </block>
                </next>
              </block>
            </xml>
        toolbox: |-
            <xml xmlns="http://www.w3.org/1999/xhtml" id="toolbox" style="display: none;">
              <category name="NN Output">
                <block type="get_neuron_last_layer"></block>
                <block type="nn_res_hor"></block>
                <block type="nn_res_ver"></block>
              </category>
              <category name="NN Debug">
                <block type="custom_print"></block>
              </category>
              <sep></sep>
              <category name="Logic" colour="#5C81A6">
                <block type="controls_if"></block>
                <block type="logic_compare">
                  <field name="OP">EQ</field>
                </block>
                <block type="logic_ternary"></block>
                <block type="math_number">
                  <field name="NUM">0</field>
                </block>
              </category>
              <category name="Functions" colour="#9A5CA6" custom="PROCEDURE"></category>
              <category name="Variables" colour="#A65C81" custom="VARIABLE"></category>
            </xml>
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
weight: 1.0
